# 当提交记录中有tauri就会自动运行, 自动打包exe文件并上传到UpgradeLink
# 仓库名是: xxdl-housing-front
name: 'Tauri-Build'

on:
  push:
    branches:
      - main

jobs:
  publish-tauri:
    if: contains(github.event.repository.name, 'xxdl-housing-front') && contains(github.event.head_commit.message, 'tauri')
    # 添加输出定义
    outputs:
      appVersion: ${{ steps.set_output.outputs.appVersion }}
    environment: prod
    env:
      SUPABASE_URL: ${{ vars.SUPABASE_URL }}
      NUXT_SESSION_PASSWORD: ${{ vars.NUXT_SESSION_PASSWORD }}
      SUPABASE_KEY: ${{ vars.SUPABASE_KEY }}
      TRPC_SERVER_URL: ${{ vars.TRPC_SERVER_URL }}
      NUXT_UI_PRO_LICENSE: ${{ vars.NUXT_UI_PRO_LICENSE }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
          - platform: windows-latest
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: true

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: |
            ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
            ${{ matrix.platform == 'windows-latest' && matrix.target == 'aarch64-pc-windows-msvc' && 'aarch64-pc-windows-msvc' || '' }}
      

      - name: install dependencies (ubuntu only)
        if: startsWith(matrix.platform, 'ubuntu')  # 修改条件，覆盖所有 Ubuntu 版本
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf xdg-utils

      - name: install frontend dependencies
        run: pnpm install
      - uses: tauri-apps/tauri-action@v0
        id: tauri-action  # 添加 id 以便后续引用
        env:
          REPO: ${{ github.event.repository.name }}
          PLATFORM: ${{ matrix.platform }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: ${{env.REPO}}-v__VERSION__
          releaseName: '${{env.REPO}} v__VERSION__'
          releaseBody: '更新了一些内容.'
          releaseDraft: false
          prerelease: false
          args: --target ${{ matrix.target }}

      - name: Generate release tag
        id: save_tag
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          # 调试输出
          echo ${{ steps.tauri-action.outputs.appVersion }}
          # 输出到步骤级
          echo "appVersion=${{ steps.tauri-action.outputs.appVersion }}" >> $GITHUB_OUTPUT

      # 设置作业级输出
      - name: Set job output
        id: set_output
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          # 调试输出
          echo ${{ steps.tauri-action.outputs.appVersion }}
          # 注意：这里引用的是 save_tag 步骤的 tag_name 输出
          echo "appVersion=${{ steps.save_tag.outputs.appVersion }}" >> $GITHUB_OUTPUT

  upgradeLink-upload:
    needs:  publish-tauri  # 依赖于 publish-tauri作业完成
    permissions:
      contents: write
    runs-on: ubuntu-latest
    env:
      OWNER: ${{ github.repository_owner }}
      REPO: ${{ github.event.repository.name }}
    steps:
      - name: Send a request to UpgradeLink
        uses: toolsetlink/upgradelink-action@v5
        with:
          source-url: 'https://github.com/${{env.OWNER}}/${{env.REPO}}/releases/download/${{env.REPO}}-v${{ needs.publish-tauri.outputs.appVersion }}/latest.json'
          access-key: ${{ secrets.UPGRADE_LINK_ACCESS_KEY }}  # ACCESS_KEY  密钥key
          tauri-key: ${{ secrets.UPGRADE_LINK_TAURI_KEY }}    # TAURI_KEY tauri 应用唯一标识
          github-token: ${{ secrets.GITHUB_TOKEN }}